{"version":3,"sources":["Components/BusinessLogic/BusinessLogic.js","Components/Confetti/index.js","Components/Confetti/Confetti.js","Components/Reusables/Button/Button.js","Components/Reusables/Button/index.js","Components/Reusables/InputField/index.js","Components/Reusables/InputField/InputField.js","Components/index.js","Components/Card/Card.js","App/index.js","App/App.js","index.js"],"names":["generateRandomNumber","min","max","Math","ceil","floor","random","playGame","userGuess","computerGuess","Number","isNaN","isValid","isRangeValid","isWithinRange","checkUserGuessAgainstComputerGuess","Confetti","_ref","check","result","react_default","a","createElement","react_confetti_min_default","width","height","Button","ptag","type","onClick","onChange","className","prototype","PropTypes","string","isRequired","func","InputField","value","placeholder","Card","_useState","useState","_useState2","Object","slicedToArray","setValue","_useState3","_useState4","guessValueUpperBound","setGuessValueUpperBound","_useState5","_useState6","guessValueLowerBound","setGuessValueLowerBound","_useState7","_useState8","computerValue","setComputerValue","_useState9","_useState10","setResult","_useState11","_useState12","lastValue","setLastValue","Components_Confetti","Reusables_InputField","e","target","Reusables_Button","res","App","Components","rootElement","document","getElementById","createRoot","render","react","src_App"],"mappings":"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","file":"static/js/main.3f157083.chunk.js","sourcesContent":["function generateRandomNumber(min, max) {\n  min = Math.ceil(min);\n  max = Math.floor(max);\n  return Math.floor(Math.random() * (max - min + 1) + min);\n}\n\nfunction isRangeValid(min, max) {\n  return min < max;\n}\n\nfunction isWithinRange(userGuess, min, max) {\n  return userGuess >= min && userGuess <= max;\n}\n\nfunction isValid(min, max, userGuess) {\n  return (\n    typeof min === \"number\" &&\n    !isNaN(min) &&\n    typeof max === \"number\" &&\n    !isNaN(max) &&\n    typeof userGuess === \"number\" &&\n    !isNaN(userGuess)\n  );\n}\n\nfunction checkUserGuessAgainstComputerGuess(userGuess, computerGuess) {\n  if (userGuess > computerGuess) return \"Too high\";\n  else if (userGuess < computerGuess) return \"Too low\";\n  return \"You are right\";\n}\n\nfunction playGame(userGuess, min, max, computerGuess) {\n  userGuess = Number(userGuess);\n  min = Number(min);\n  max = Number(max);\n\n  if (isValid(min, max, userGuess)) {\n    if (isRangeValid(min, max)) {\n      if (isWithinRange(userGuess, min, max)) {\n        return checkUserGuessAgainstComputerGuess(userGuess, computerGuess);\n      }\n      return \"Enter number within range\";\n    }\n    return \"Lower bound cannot be greater than upper bound\";\n  }\n  return \"Enter numbers only\";\n}\n\nexport { generateRandomNumber, playGame };\n","import Confetti from \"./Confetti\";\n\nexport default Confetti;\n","import React from 'react';\nimport Confetti from \"react-confetti\";\n\nconst CustomConfetti = ({ result }) => {\n  const check = result === \"You are right\";\n  return <div>{check && <Confetti width={\"400px\"} height={\"500px\"} />}</div>;\n};\n\nexport default CustomConfetti;\n","import React from 'react';\nimport \"./Button.css\";\nimport PropTypes from \"prop-types\";\n\nconst Button = ({ ptag, type, onClick, onChange }) => {\n  return (\n    <div className=\"btn\">\n      <button type={type} onClick={onClick} onChange={onChange}>\n        {ptag}\n      </button>\n    </div>\n  );\n};\n\nButton.prototype = {\n  ptag: PropTypes.string.isRequired,\n  type: PropTypes.string,\n  onClick: PropTypes.func.isRequired,\n  onChange: PropTypes.func.isRequired\n};\n\nexport default Button;\n","import Button from \"./Button\";\n\nexport default Button;\n","import InputField from \"./InputField\";\n\nexport default InputField;\n","import React from 'react';\nimport \"./InputField.css\";\nimport PropTypes from \"prop-types\";\n\nconst InputField = ({ value, type, onChange, placeholder }) => {\n  return (\n    <div className=\"input-field\">\n      <input\n        value={value}\n        type={type}\n        placeholder={placeholder}\n        onChange={onChange}\n      />\n    </div>\n  );\n};\n\nInputField.propTypes = {\n  value: PropTypes.string.isRequired,\n  type: PropTypes.string,\n  placeholder: PropTypes.string.isRequired,\n  onChange: PropTypes.func.isRequired\n};\n\nexport default InputField;\n","import Card from \"./Card\";\n\nexport default Card;\n","import React, { useState } from \"react\";\nimport { generateRandomNumber, playGame } from \"../BusinessLogic\";\nimport Confetti from \"../Confetti\";\nimport { Button, InputField } from \"../Reusables\";\nimport \"./Card.css\";\n\nconst Card = () => {\n  const [value, setValue] = useState(\"\");\n  const [guessValueUpperBound, setGuessValueUpperBound] = useState(\"10\");\n  const [guessValueLowerBound, setGuessValueLowerBound] = useState(\"1\");\n  const [computerValue, setComputerValue] = useState(\n    generateRandomNumber(guessValueLowerBound, guessValueUpperBound)\n  );\n\n  const defaultResult = \"...waiting for your guess...\";\n  const [result, setResult] = useState(defaultResult);\n\n  const defaultLastValue = \"none\";\n  const [lastValue, setLastValue] = useState(defaultLastValue);\n  const onClickHandler = () => {\n    setLastValue(value);\n    let res = playGame(\n      value,\n      guessValueLowerBound,\n      guessValueUpperBound,\n      computerValue\n    );\n    setResult(res);\n  };\n\n  const handleMakeGuessButton = (e) => {\n    setValue(e.target.value);\n  };\n\n  const handleReset = () => {\n    setLastValue(defaultLastValue);\n    setValue(\"\");\n    setResult(defaultResult);\n    setComputerValue(\n      generateRandomNumber(guessValueLowerBound, guessValueUpperBound)\n    );\n  };\n\n  return (\n    <div className=\"main-container\">\n      <div className=\"container\">\n        {<Confetti result={result} />}\n        <section className=\"game-info\">\n          <h2>Play</h2>\n          <p>\n            Guess a number between {guessValueLowerBound} and{\" \"}\n            {guessValueUpperBound}.\n          </p>\n          <p>Last guess: {lastValue}</p>\n          <p className=\"result\">{result}</p>\n        </section>\n        <section className=\"guess-section\">\n          <InputField\n            value={value}\n            type=\"text\"\n            onChange={(e) => setValue(e.target.value)}\n            placeholder=\"Enter your guess\"\n          />\n          <Button\n            ptag={\"Make guess\"}\n            type=\"submit\"\n            onClick={onClickHandler}\n            onChange={handleMakeGuessButton}\n          />\n        </section>\n\n        <hr />\n\n        <section className=\"config-section\">\n          <h4>Game Config</h4>\n          <InputField\n            value={guessValueLowerBound}\n            type=\"text\"\n            onChange={(e) => setGuessValueLowerBound(e.target.value)}\n            placeholder=\"Enter lower bound\"\n          />\n          <InputField\n            value={guessValueUpperBound}\n            type=\"text\"\n            onChange={(e) => setGuessValueUpperBound(e.target.value)}\n            placeholder={\"Enter upper bound\"}\n          />\n          <Button ptag={\"Reset\"} type=\"submit\" onClick={handleReset} />\n        </section>\n      </div>\n    </div>\n  );\n};\n\nexport default Card;\n","import App from \"./App\";\n\nexport default App;\n","import React from 'react';\nimport Card from \"../Components\";\nimport \"./styles.css\";\n\nexport default function App() {\n  return (\n    <div className=\"App\">\n      {/* <h1>Hello CodeSandbox</h1>\n      <h2>Start editing to see some magic happen!</h2> */}\n      <Card />\n    </div>\n  );\n}\n","import React, { StrictMode } from \"react\";\nimport { createRoot } from \"react-dom/client\";\n\nimport App from \"./App\";\n\nconst rootElement = document.getElementById(\"root\");\nconst root = createRoot(rootElement);\n\nroot.render(\n  <StrictMode>\n    <App />\n  </StrictMode>\n);\n"],"sourceRoot":""}